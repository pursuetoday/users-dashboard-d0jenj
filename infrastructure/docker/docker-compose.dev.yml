version: '3.8'

services:
  # React frontend development service with hot-reload and debugging capabilities
  frontend:
    build:
      context: ./src/web
    volumes:
      - ./src/web:/app
      - /app/node_modules
    ports:
      - "5173:5173"
      - "9229:9229"
    environment:
      - VITE_API_URL=http://localhost:3000
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
    command: npm run dev
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app_network

  # Node.js backend development service with debugging and monitoring
  backend:
    build:
      context: ./src/backend
    volumes:
      - ./src/backend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
      - "9230:9229"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/user_management
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=dev_secret
      - REFRESH_TOKEN_SECRET=dev_refresh_secret
      - LOG_LEVEL=debug
    command: npm run dev
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app_network

  # PostgreSQL database service with development configuration
  postgres:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=user_management
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app_network

  # Redis cache service with persistence and monitoring
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass dev_redis_password
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app_network

  # Nginx reverse proxy service with development configuration
  nginx:
    image: nginx:1.25-alpine
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "80:80"
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app_network

  # PostgreSQL administration tool for development
  pgadmin:
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - app_network

  # Redis monitoring and management tool
  redis-commander:
    image: rediscommander/redis-commander
    environment:
      - REDIS_HOSTS=local:redis:6379:0:dev_redis_password
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - app_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  app_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16