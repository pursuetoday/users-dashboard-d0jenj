version: '3.8'

services:
  api:
    build:
      context: .
    ports:
      - "3000:3000"  # API port
      - "9229:9229"  # Node.js debug port
    volumes:
      - .:/usr/src/app
      - node_modules:/usr/src/app/node_modules
    environment:
      NODE_ENV: development
      PORT: 3000
      DATABASE_URL: postgresql://user:password@postgres:5432/user_management
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      CORS_ORIGIN: http://localhost:5173
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    logging:
      driver: json-file
      options:
        max-size: 10m
        max-file: '3'
    security_opt:
      - no-new-privileges:true
    command: npm run dev
    networks:
      - backend

  postgres:
    image: postgres:15-alpine  # Version 15+ as specified in the technical requirements
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: user_management
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d user_management"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - backend

  redis:
    image: redis:7-alpine  # Version 7.x as specified in the technical requirements
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redispassword}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - backend

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  node_modules:

networks:
  backend:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16